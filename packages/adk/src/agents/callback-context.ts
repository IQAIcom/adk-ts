import { EventActions } from "../events/event-actions";
import type { Part } from "../models/part";
import { State } from "../sessions/state";
import { ReadonlyContext } from "./readonly-context";
import type { InvocationContext } from "./invocation-context";

/**
 * The context of various callbacks within an agent run
 */
export class CallbackContext extends ReadonlyContext {
	private _eventActions: EventActions;
	private _state: State;

	/**
	 * Constructor for CallbackContext
	 */
	constructor(
		invocationContext: InvocationContext,
		options: {
			eventActions?: EventActions;
		} = {},
	) {
		super(invocationContext);

		this._eventActions = options.eventActions || new EventActions();

		// Create delta-aware state combining session state with event actions
		// For now, use metadata as the base state until we have proper session.state
		this._state = new State({
			value: this._invocationContext.metadata,
			delta: this._eventActions.stateDelta,
		});
	}

	/**
	 * The delta-aware state of the current session.
	 * For any state change, you can mutate this object directly,
	 * e.g. `ctx.state.set('foo', 'bar')`
	 */
	override get state(): State {
		return this._state;
	}

	/**
	 * Loads an artifact attached to the current session
	 * @param filename The filename of the artifact
	 * @param version The version of the artifact. If undefined, the latest version will be returned
	 * @returns The artifact or undefined if artifact service is not configured
	 */
	async loadArtifact(
		filename: string,
		version?: number,
	): Promise<Part | undefined> {
		// Artifact service is not implemented yet
		// Return undefined instead of throwing to allow graceful degradation
		console.warn(
			`loadArtifact called for '${filename}' but artifact service is not implemented yet.`,
		);
		return undefined;
	}

	/**
	 * Saves an artifact and records it as delta for the current session
	 *
	 * @param filename The filename of the artifact
	 * @param artifact The artifact to save
	 * @returns The version of the artifact
	 *
	 * @remarks
	 * This is currently a placeholder implementation. Full implementation requires:
	 * - Integration with BaseArtifactService for actual storage
	 * - Proper version management and increment logic
	 * - Error handling for storage failures
	 * - Support for different artifact storage backends
	 */
	async saveArtifact(filename: string, artifact: Part): Promise<number> {
		console.warn(
			`saveArtifact called for '${filename}' but full artifact service is not implemented yet. This is a placeholder that records the change but does not persist the artifact.`,
		);

		// Record the artifact change in event actions for future processing
		this._eventActions.artifactDelta[filename] = 1;

		// TODO: Implement actual artifact storage with BaseArtifactService
		// - Store artifact content
		// - Generate proper version numbers
		// - Handle concurrent writes
		// - Support different storage backends

		return 1; // Placeholder version - should be generated by artifact service
	}

	/**
	 * Gets the event actions associated with this context
	 * @returns The event actions
	 */
	get eventActions(): EventActions {
		return this._eventActions;
	}
}
