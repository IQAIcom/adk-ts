{
	"openapi": "3.0.0",
	"paths": {
		"/api/agents": {
			"get": {
				"description": "Returns all agent entries found by scanning the agents directory. Each agent includes name, absolute, and relative paths.",
				"operationId": "AgentsController_listAgents",
				"parameters": [],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AgentsListResponseDto"
								}
							}
						}
					}
				},
				"summary": "List discovered agents",
				"tags": ["agents"]
			}
		},
		"/api/agents/refresh": {
			"post": {
				"description": "Triggers a fresh scan of the agents directory and returns the updated agent list.",
				"operationId": "AgentsController_refreshAgents",
				"parameters": [],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AgentsListResponseDto"
								}
							}
						}
					}
				},
				"summary": "Rescan and list agents",
				"tags": ["agents"]
			}
		},
		"/api/agents/{id}/graph": {
			"get": {
				"description": "Returns the agent graph (nodes and edges) for the selected root agent. Tools are always included.",
				"operationId": "GraphController_getGraph",
				"parameters": [
					{
						"name": "id",
						"required": true,
						"in": "path",
						"description": "Agent identifier (relative path)",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/GraphResponseDto"
								}
							}
						}
					}
				},
				"summary": "Get agent graph",
				"tags": ["agents"]
			}
		},
		"/api/agents/{id}/messages": {
			"get": {
				"description": "Returns ordered chat transcript for the agent, including user and assistant messages.",
				"operationId": "MessagingController_getAgentMessages",
				"parameters": [
					{
						"name": "id",
						"required": true,
						"in": "path",
						"description": "Agent identifier",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/MessagesResponseDto"
								}
							}
						}
					}
				},
				"summary": "Get message history",
				"tags": ["messaging"]
			}
		},
		"/api/agents/{id}/message": {
			"post": {
				"description": "Adds a user message (with optional base64 attachments) and returns the assistant response.",
				"operationId": "MessagingController_postAgentMessage",
				"parameters": [
					{
						"name": "id",
						"required": true,
						"in": "path",
						"description": "Agent identifier",
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"description": "Message payload",
					"content": {
						"application/json": {
							"schema": {
								"example": {
									"message": "Hello agent!",
									"attachments": [
										{
											"name": "notes.txt",
											"mimeType": "text/plain",
											"data": "YmFzZTY0IGRhdGE="
										}
									]
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/MessageResponseDto"
								}
							}
						}
					}
				},
				"summary": "Send a message to the agent",
				"tags": ["messaging"]
			}
		},
		"/api/agents/{id}/sessions": {
			"get": {
				"description": "Returns all active sessions for the specified agent including metadata.",
				"operationId": "SessionsController_listSessions",
				"parameters": [
					{
						"name": "id",
						"required": true,
						"in": "path",
						"description": "URL-encoded absolute agent path or identifier",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/SessionsResponseDto"
								}
							}
						}
					}
				},
				"summary": "List sessions for an agent",
				"tags": ["sessions"]
			},
			"post": {
				"description": "Creates a session for the agent. Optional state and custom sessionId may be provided.",
				"operationId": "SessionsController_createSession",
				"parameters": [
					{
						"name": "id",
						"required": true,
						"in": "path",
						"description": "URL-encoded absolute agent path or identifier",
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"description": "Initial session creation payload with optional state",
					"content": {
						"application/json": {
							"schema": {
								"example": {
									"state": {
										"foo": "bar"
									},
									"sessionId": "custom-id-123"
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/SessionResponseDto"
								}
							}
						}
					}
				},
				"summary": "Create a new session",
				"tags": ["sessions"]
			}
		},
		"/api/agents/{id}/sessions/{sessionId}": {
			"delete": {
				"description": "Stops and removes the session if it exists.",
				"operationId": "SessionsController_deleteSession",
				"parameters": [
					{
						"name": "id",
						"required": true,
						"in": "path",
						"description": "Agent identifier",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "sessionId",
						"required": true,
						"in": "path",
						"description": "Session to delete",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/SuccessResponseDto"
								}
							}
						}
					}
				},
				"summary": "Delete a session",
				"tags": ["sessions"]
			}
		},
		"/api/agents/{id}/sessions/{sessionId}/switch": {
			"post": {
				"description": "Marks the specified session as active (implementation specific).",
				"operationId": "SessionsController_switchSession",
				"parameters": [
					{
						"name": "id",
						"required": true,
						"in": "path",
						"description": "Agent identifier",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "sessionId",
						"required": true,
						"in": "path",
						"description": "Session to switch to",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/SuccessResponseDto"
								}
							}
						}
					}
				},
				"summary": "Switch active session",
				"tags": ["sessions"]
			}
		},
		"/api/agents/{id}/sessions/{sessionId}/events": {
			"get": {
				"description": "Returns chronological events for a specific agent session including actions, function calls, and responses.",
				"operationId": "EventsController_getEvents",
				"parameters": [
					{
						"name": "id",
						"required": true,
						"in": "path",
						"description": "URL-encoded absolute agent path or identifier",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "sessionId",
						"required": true,
						"in": "path",
						"description": "Target session identifier",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/EventsResponseDto"
								}
							}
						}
					}
				},
				"summary": "Get session events",
				"tags": ["events"]
			}
		},
		"/api/agents/{id}/sessions/{sessionId}/state": {
			"get": {
				"description": "Retrieves combined agent, user, and session state along with metadata such as last update time and size metrics.",
				"operationId": "StateController_getState",
				"parameters": [
					{
						"name": "id",
						"required": true,
						"in": "path",
						"description": "Agent identifier",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "sessionId",
						"required": true,
						"in": "path",
						"description": "Session identifier",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/StateResponseDto"
								}
							}
						}
					}
				},
				"summary": "Get current session state",
				"tags": ["state"]
			},
			"put": {
				"description": "Updates a nested state value for the session given a dot/JSON path and value payload.",
				"operationId": "StateController_updateState",
				"parameters": [
					{
						"name": "id",
						"required": true,
						"in": "path",
						"description": "Agent identifier",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "sessionId",
						"required": true,
						"in": "path",
						"description": "Session identifier",
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"description": "State update payload specifying path and new value",
					"content": {
						"application/json": {
							"schema": {
								"example": {
									"path": "user.preferences.theme",
									"value": "dark"
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/SuccessResponseDto"
								}
							}
						}
					}
				},
				"summary": "Update a state path",
				"tags": ["state"]
			}
		},
		"/reload/stream": {
			"get": {
				"operationId": "ReloadController_stream",
				"parameters": [],
				"responses": {
					"200": {
						"description": ""
					}
				},
				"tags": ["Reload"]
			}
		},
		"/health": {
			"get": {
				"description": "Basic liveness probe returning status: ok when the service is up.",
				"operationId": "HealthController_health",
				"parameters": [],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HealthResponseDto"
								}
							}
						}
					}
				},
				"summary": "Health check",
				"tags": ["health"]
			}
		}
	},
	"info": {
		"title": "ADK HTTP API",
		"description": "REST endpoints for managing and interacting with ADK agents",
		"version": "1.0.0",
		"contact": {}
	},
	"tags": [
		{
			"name": "agents",
			"description": ""
		},
		{
			"name": "sessions",
			"description": ""
		},
		{
			"name": "events",
			"description": ""
		},
		{
			"name": "state",
			"description": ""
		},
		{
			"name": "messaging",
			"description": ""
		},
		{
			"name": "health",
			"description": ""
		}
	],
	"servers": [],
	"components": {
		"schemas": {
			"AgentListItemDto": {
				"type": "object",
				"properties": {
					"path": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"directory": {
						"type": "string"
					},
					"relativePath": {
						"type": "string"
					}
				},
				"required": ["path", "name", "directory", "relativePath"]
			},
			"AgentsListResponseDto": {
				"type": "object",
				"properties": {
					"agents": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/AgentListItemDto"
						}
					}
				},
				"required": ["agents"]
			},
			"GraphNodeDto": {
				"type": "object",
				"properties": {
					"id": {
						"type": "string"
					},
					"label": {
						"type": "string"
					},
					"kind": {
						"type": "string",
						"enum": ["agent", "tool"]
					},
					"type": {
						"type": "string"
					},
					"shape": {
						"type": "string"
					},
					"group": {
						"type": "string"
					}
				},
				"required": ["id", "label", "kind"]
			},
			"GraphEdgeDto": {
				"type": "object",
				"properties": {
					"from": {
						"type": "string"
					},
					"to": {
						"type": "string"
					}
				},
				"required": ["from", "to"]
			},
			"GraphResponseDto": {
				"type": "object",
				"properties": {
					"nodes": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/GraphNodeDto"
						}
					},
					"edges": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/GraphEdgeDto"
						}
					}
				},
				"required": ["nodes", "edges"]
			},
			"MessageItemDto": {
				"type": "object",
				"properties": {
					"id": {
						"type": "number",
						"example": 1
					},
					"type": {
						"type": "string",
						"enum": ["user", "assistant"],
						"example": "user"
					},
					"content": {
						"type": "string",
						"example": "Hello"
					},
					"timestamp": {
						"type": "string",
						"example": "2025-10-06T08:53:52.205Z"
					}
				},
				"required": ["id", "type", "content", "timestamp"]
			},
			"MessagesResponseDto": {
				"type": "object",
				"properties": {
					"messages": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/MessageItemDto"
						}
					}
				},
				"required": ["messages"]
			},
			"MessageResponseDto": {
				"type": "object",
				"properties": {
					"response": {
						"type": "string",
						"example": "Hi there!"
					}
				},
				"required": ["response"]
			},
			"SessionResponseDto": {
				"type": "object",
				"properties": {
					"id": {
						"type": "string"
					},
					"appName": {
						"type": "string"
					},
					"userId": {
						"type": "string"
					},
					"state": {
						"type": "object"
					},
					"eventCount": {
						"type": "number",
						"example": 3
					},
					"lastUpdateTime": {
						"type": "number",
						"example": 1759740832206
					},
					"createdAt": {
						"type": "number",
						"example": 1759740832206
					}
				},
				"required": [
					"id",
					"appName",
					"userId",
					"state",
					"eventCount",
					"lastUpdateTime",
					"createdAt"
				]
			},
			"SessionsResponseDto": {
				"type": "object",
				"properties": {
					"sessions": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/SessionResponseDto"
						}
					}
				},
				"required": ["sessions"]
			},
			"SuccessResponseDto": {
				"type": "object",
				"properties": {
					"success": {
						"type": "boolean",
						"example": true
					}
				},
				"required": ["success"]
			},
			"EventItemDto": {
				"type": "object",
				"properties": {
					"id": {
						"type": "string"
					},
					"author": {
						"type": "string"
					},
					"timestamp": {
						"type": "number",
						"example": 1759740832207
					},
					"content": {
						"type": "object",
						"description": "Raw event content"
					},
					"actions": {
						"type": "object",
						"nullable": true
					},
					"functionCalls": {
						"type": "array",
						"items": {
							"type": "object"
						}
					},
					"functionResponses": {
						"type": "array",
						"items": {
							"type": "object"
						}
					},
					"branch": {
						"type": "string",
						"nullable": true
					},
					"isFinalResponse": {
						"type": "boolean",
						"example": false
					}
				},
				"required": [
					"id",
					"author",
					"timestamp",
					"content",
					"actions",
					"functionCalls",
					"functionResponses",
					"isFinalResponse"
				]
			},
			"EventsResponseDto": {
				"type": "object",
				"properties": {
					"events": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/EventItemDto"
						}
					},
					"totalCount": {
						"type": "number",
						"example": 1
					}
				},
				"required": ["events", "totalCount"]
			},
			"StateMetadataDto": {
				"type": "object",
				"properties": {
					"lastUpdated": {
						"type": "number",
						"example": 1759740832207
					},
					"changeCount": {
						"type": "number",
						"example": 0
					},
					"totalKeys": {
						"type": "number",
						"example": 5
					},
					"sizeBytes": {
						"type": "number",
						"example": 120
					}
				},
				"required": ["lastUpdated", "changeCount", "totalKeys", "sizeBytes"]
			},
			"StateResponseDto": {
				"type": "object",
				"properties": {
					"agentState": {
						"type": "object"
					},
					"userState": {
						"type": "object"
					},
					"sessionState": {
						"type": "object"
					},
					"metadata": {
						"$ref": "#/components/schemas/StateMetadataDto"
					}
				},
				"required": ["agentState", "userState", "sessionState", "metadata"]
			},
			"HealthResponseDto": {
				"type": "object",
				"properties": {
					"status": {
						"type": "string",
						"example": "ok"
					}
				},
				"required": ["status"]
			}
		}
	}
}
